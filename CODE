# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import Pipeline
import joblib

# Load the dataset (You need to have a dataset for this task)
# Assume you have a CSV file with 'text' and 'label' columns where 'label' indicates spam or not spam
data = pd.read_csv('spam_dataset.csv')

# Preprocess the text data
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['text'])
y = data['label']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a pipeline for text classification
text_classifier = Pipeline([
    ('vectorizer', CountVectorizer()),  # Convert text to a bag-of-words
    ('tfidf', TfidfTransformer()),      # Apply TF-IDF transformation
    ('classifier', MultinomialNB())     # Use Naive Bayes classifier
])

# Train the model using the pipeline
text_classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = text_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion_mat = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Confusion Matrix:")
print(confusion_mat)
print("Classification Report:")
print(classification_rep)

# Example of using the model to classify new emails
def classify_email(email_text):
    prediction = text_classifier.predict([email_text])
    return prediction[0]

# Example usage
new_email = "Congratulations! You've won a free iPhone."
result = classify_email(new_email)
if result == 'spam':
    print("This email is spam.")
else:
    print("This email is not spam.")

# Save the model and vectorizer for future use
joblib.dump(text_classifier, 'spam_detector_model.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')
